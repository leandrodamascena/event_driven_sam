AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    event-driven-app

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
    Function:
        Timeout: 5
        MemorySize: 256
        Runtime: python3.9
        Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
        # Embed Lambda Powertools as a shared Layer
        # See: https://awslabs.github.io/aws-lambda-powertools-python/latest/#lambda-layer
        Layers: # 
            - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:9
        Environment:
            Variables:
                # Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
                LOG_LEVEL: INFO
                POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
                POWERTOOLS_LOGGER_LOG_EVENT: true
                POWERTOOLS_METRICS_NAMESPACE: EventDrivenSAM
                POWERTOOLS_SERVICE_NAME: event_drive_sam

Resources:
  ###################
  # COGNITO POOLS
  ##################
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: event_driven_sam
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
  ###################
  # FUNCTIONS
  ##################
  BabySitterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - LambdaLoggingPolicy
    Properties:
      CodeUri: event_driven_service/
      Handler: app.lambda_handler
      Role: !GetAtt AddBabysitterRole.Arn
      Runtime: python3.8
      Description: Sample Lambda Powertools Direct Lambda Resolver
      Tags:
        SOLUTION: LambdaPowertoolsPython

 ###################
  # IAM PERMISSIONS AND ROLES
 ##################
  AppSyncServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  InvokeLambdaResolverPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "DirectAppSyncLambda"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:invokeFunction"
            Resource:
              - !GetAtt BabySitterFunction.Arn
      Roles:
        - !Ref AppSyncServiceRole
  RoleAppSyncCloudWatch:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

 ###################
  # GRAPHQL API
 ##################

  EventDrivenSAMApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: EventDrivenSAMApi
      AuthenticationType: "API_KEY"
      AdditionalAuthenticationProviders:
        - AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
            AwsRegion: !Ref AWS::Region
            UserPoolId: !Ref CognitoUserPool
      XrayEnabled: true
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt RoleAppSyncCloudWatch.Arn
        ExcludeVerboseContent: FALSE
        FieldLogLevel: ALL

  EventDrivenSAMApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt EventDrivenSAMApi.ApiId

  BabySitterApiSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt EventDrivenSAMApi.ApiId
      DefinitionS3Location: 'graphql/schema.graphql'


    HelloWorldFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
        Properties:
            Handler: app.lambda_handler
            CodeUri: event_driven_service
            Description: Hello World function
            Events:
                HelloPath:
                    Type: Api # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
                    Properties:
                        Path: /hello
                        Method: GET
                HelloYou:
                    Type: Api
                    Properties:
                        Path: /hello/{name}
                        Method: GET
            # Policies: # Example inline policy
            #     - Version: "2012-10-17"
            #     Statement:
            #         - Effect: "Allow"
            #         Action:
            #             - "ssm:GetParameter"
            #         Resource:
            #             - "*"
            Environment:
                Variables:
                    PARAM1: VALUE
            Tags:
                LambdaPowertools: python

    # Sample policy to add additional permissions to your Lambda
    # HelloWorldFunctionAdditionalPermission:
    #     Type: "AWS::IAM::Policy"
    #     Properties:
    #         PolicyName: "root"
    #         PolicyDocument:
    #             Version: "2012-10-17"
    #             Statement:
    #                 -
    #                     Effect: "Allow"
    #                     Action: "ssm:GetParameters"
    #                     Resource: "*"
    #         Roles:
    #             - !Ref HelloWorldFunctionRole # Sample policy to demonstrate Implicit IAM Role created with SAM

Outputs:
    HelloWorldApigwURL:
      Description: "API Gateway endpoint URL for Prod environment for Hello World Function"
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"

    HelloWorldFunction:
      Description: "Hello World Lambda Function ARN"
      Value: !GetAtt HelloWorldFunction.Arn

